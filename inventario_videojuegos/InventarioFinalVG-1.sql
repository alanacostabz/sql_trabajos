DROP DATABASE IF EXISTS INVENTORY_VG;
CREATE DATABASE INVENTORY_VG;
USE INVENTORY_VG;

DROP TABLE IF EXISTS EMPLOYEES;
CREATE TABLE EMPLOYEES(
ID_EMPLOYEE VARCHAR(10) NOT NULL,
FIRSTNAME VARCHAR(30) NOT NULL,
LASTNAME VARCHAR(30) NOT NULL,
NAME VARCHAR(50) NOT NULL,
BIRTHDAY_DATE DATE NOT NULL,
OCCUPATION VARCHAR(30),
SALARY DOUBLE DEFAULT 0,
GENDER ENUM('M','F'),
EMAIL VARCHAR(50),
TELEPHONE VARCHAR(30),
CURP VARCHAR(18),
PRIMARY KEY(ID_EMPLOYEE)
);

INSERT INTO `EMPLOYEES`(`ID_EMPLOYEE`, `FIRSTNAME`, `LASTNAME`, `NAME`, 
	`BIRTHDAY_DATE`, `OCCUPATION`, `SALARY`, `GENDER`, `EMAIL`, `TELEPHONE`, `CURP`)
	 VALUES ('EMP01','ACOSTA','BAEZ','ALAN','1995-04-25','GERENTE',16500,'M','bryanbaez2504@gmail.com',
	 	'6623351163','CABB950425HSRLSZR0'),('EMP02','TELLECHEA','RASCON','ADRIAN','1996-04-30','PISO',10500,
	 	'M','adriantell@gmail.com','6623783422','CTRA960430HSRLSZR0'),('EMP03','TREVINO','ROBLES',
	 	'JUAN','1989-12-27','ALMACEN',9500,'M','heyjohny@gmail.com','662345572','CTRJ891227HSRLSZR0');

-------------------------------------------------------------------------------------------------------------------------------
DROP TABLE IF EXISTS SUPPLIERS;
CREATE TABLE SUPPLIERS(
ID_SUPLIER INT NOT NULL AUTO_INCREMENT,
NAME VARCHAR(99) NOT NULL,
TELEPHONE VARCHAR(30) NOT NULL,
COUNTRY VARCHAR(30) NOT NULL,
STATE VARCHAR(30) NOT NULL,
ADDRESS TEXT NOT NULL,
POSTAL_CODE VARCHAR(10) NOT NULL,
PRIMARY KEY(ID_SUPLIER)
);

 INSERT INTO `suppliers`(`NAME`, `TELEPHONE`, `COUNTRY`, `STATE`, `ADDRESS`, `POSTAL_CODE`) VALUES
  ('UBISOFT','+1 415-547-4000','ESTADOS UNIDOS','CALIFORNIA','625 3rd St, San Francisco, CA, EE. UU.','94107'),
     ('SONY ELECTRONICS MEXICO','01 55 5267 2000','MEXICO','CIUDAD DE MEXICO','Santa Fe, Zedec Sta Fé, Ciudad de México,
     CDMX.','01219'),('CORPORATIVO MICROSOFT MEXICO','30671000','MEXICO','CIUDAD DE MEXICO',
     'Santa Fe, Zedec Sta Fé, Ciudad de México, CDMX.','01210'),('NINTENDO OF AMERICA INC.',
     '(425) 882-2040','ESTADOS UNIDOS','WASHINGTON','4600 150th Ave NE Redmond, WA','98052'),
     ('ROCKSTAR GAMES','+1 212-334-6633','ESTADOS UNIDOS','NEW YORK','4 622, Broadway, New York, NY','10012'),
     ('Capcom U.S.A., Inc.','(310) 943-5470','ESTADOS UNIDOS','CALIFORNIA','Beeline Interactive, 
     	Inc. 10960 Wilshire Blvd. 15th Floor','90024'),('Capcom U.S.A., Inc.Atlus U.S.A., Inc.','949-788-0455',
     	'ESTADOS UNIDOS','CALIFORNIA','Atlus U.S.A., Inc. 6400 Oak Canyon, Suite 100 Irvine, CA','92618'),
     	('Bandai','01 55 5523 9445','ESTADOS UNIDOS','CALIFORNIA',
     		'Insurgentes Sur número 863, Nápoles, Ciudad de México, CDMX','03810');
-------------------------------------------------------------------------------------------------------------------------------
DROP TABLE IF EXISTS CATALOGUE_COMPANIES;
CREATE TABLE CATALOGUE_COMPANIES(
ID_COMPANY INT NOT NULL AUTO_INCREMENT,
NAME VARCHAR(99),
FK_ID_SUPPLIER INT NOT NULL,
PRIMARY KEY(ID_COMPANY),
FOREIGN KEY(FK_ID_SUPPLIER) REFERENCES SUPPLIERS(ID_SUPLIER)
);
INSERT INTO `CATALOGUE_COMPANIES`(`NAME`,`FK_ID_SUPPLIER`) VALUES ('CAPCOM',6),('ROCKSTAR',5),('NINTENDO',4),('MICROSOFT',3),
('SONY',2),('NAUGHTY DOG',2),('UBISOFT',1),('ATLUS',7),('SANTA MONICA',2),
('BUNGIE',3),('BANDAI NAMCO',8);
-------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------
DROP TABLE IF EXISTS VIDEOGAMES;
DROP TABLE IF EXISTS CATALOGUE_PLATAFORMS;
DROP TABLE IF EXISTS PRODUCTS;
CREATE TABLE PRODUCTS(
ID_PRODUCT INT NOT NULL AUTO_INCREMENT,
NAME VARCHAR(99) NOT NULL,
DESCRIPTION TEXT,
GENRE ENUM('ACTION','ACTION-ADVENTURE','ADVENTURE','RPG','SPORTS','SHOOTER','CASUAL','FIGTHING','PUZZLE','STRATEGY','ARCADE','OTHER'),
PLATAFORM ENUM('GAMECUBE','PS2','XBOX','PS3','NINTENDO WII','XBOX 360',
	'PS4','XBOX ONE','NINTENDO WII U','NINTENDO SWITCH','ALL PLATAFORMS','OTHER') ,
STOCK INT NOT NULL DEFAULT 0,
PRICE DOUBLE NOT NULL,
RELEASE_DATE DATE NOT NULL,
FORMAT ENUM('PHYSICAL','DIGITAL'),
ESBR ENUM('E','E+10','T','M','RP'),
CONDITION_PRODUCT ENUM('NEW','USED'),
FK_ID_CATEGORY INT NOT NULL,
FK_ID_COMPANY INT NOT NULL,
PRIMARY KEY(ID_PRODUCT),
FOREIGN KEY(FK_ID_COMPANY) REFERENCES CATALOGUE_COMPANIES(FK_ID_COMPANY),
FOREIGN KEY(FK_ID_CATEGORY) REFERENCES CATALOGUE_CATEGORIES(ID_CATEGORY)
);

INSERT INTO `PRODUCTS`(`NAME`, `DESCRIPTION`, `GENRE`, `PLATAFORM`, `STOCK`, `PRICE`, `RELEASE_DATE`,`FORMAT`, `ESBR`,
 `CONDITION_PRODUCT`,`FK_ID_CATEGORY`,`FK_ID_COMPANY`) VALUES ('RESIDENT EVIL 2 REMAKE','The genre-defining masterpiece Resident Evil 2 returns, 
 completely rebuilt from the ground up for a deeper narrative experience.','ACTION-ADVENTURE',
 'PS4',30,'59.99','2019-01-25','PHYSICAL','M','NEW',5,6),('ZELDA: BREATH OF THE WILD','Forget everything you know about The Legend of Zelda games. 
 Step into a world of discovery, exploration, and adventure in The Legend of Zelda: Breath of the Wild, a boundary-breaking new game in 
 the acclaimed series.','ADVENTURE',
 'NINTENDO SWITCH',30,'59.99','2017-03-03','PHYSICAL','T','NEW',5,3),('HALO 5','A mysterious and unstoppable force threatens the galaxy, 
 the Master Chief is missing and his loyalty questioned.','SHOOTER','XBOX ONE',30,'29.99',
 '2015-10-27','PHYSICAL','T','NEW',5,4),('SUPER SMASH BROS. ULTIMATE','Gaming icons clash in the ultimate brawl you can play anytime, anywhere! Smash 
 rivals off the stage as new characters Simon Belmont and King K. ','CASUAL','NINTENDO SWITCH',50,'59.99','2018-12-07','PHYSICAL',
 'T','NEW',5,3),('PERSONA 5','BEST RPG OF 2016','RPG','PS4',50,'49.99','2016-04-03','PHYSICAL','M','NEW',5,8);
 -------------------------------------------------------------------------------------------------------------------------------
DROP TABLE IF EXISTS CATALOGUE_CATEGORIES;
CREATE TABLE CATALOGUE_CATEGORIES(
ID_CATEGORY INT NOT NULL AUTO_INCREMENT,
NAME ENUM('HARDWARE','SOFTWARE','ACCESORIES','DIGITAL CONTENT','TOYS','OTHERS'),
TYPE VARCHAR(99),
PRIMARY KEY(ID_CATEGORY)
);
INSERT INTO `CATALOGUE_CATEGORIES`(`NAME`,`TYPE`) VALUES ('HARDWARE','CONSOLES'),('ACCESORIES','CONTROLLERS'),
('DIGITAL CONTENT','SEASSON PASSES'),('TOYS','AMIIBO'),('SOFTWARE','VIDEOGAMES');
-----------------------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------------------

CREATE TABLE SALES_DESCRIPTION(
ID_DESCRIPTION_SALES INT NOT NULL,
FK_ID_PRODUCT INT NOT NULL,
STOCK INT NOT NULL DEFAULT 0,
PRIMARY KEY(ID_DESCRIPTION_SALES, FK_ID_PRODUCT),
FOREIGN KEY(FK_ID_PRODUCT) REFERENCES PRODUCTS(ID_PRODUCT)
);

INSERT INTO SALES_DESCRIPTION  (ID_DESCRIPTION_SALES,FK_ID_PRODUCT,STOCK) VALUES (1,1,1),(1,5,1);

DROP TABLE IF EXISTS SALES;
CREATE TABLE SALES(
ID_SALE INT NOT NULL AUTO_INCREMENT,
DATE_SALE TIMESTAMP,
SUB_TOTAL DOUBLE NOT NULL,
TOTAL DOUBLE NOT NULL,
FK_ID_EMPLOYEE VARCHAR(10) NOT NULL,
FK_ID_DESCRIPTION_SALES INT NOT NULL,
PRIMARY KEY(ID_SALE),
FOREIGN KEY(FK_ID_DESCRIPTION_SALES) REFERENCES SALES_DESCRIPTION(FK_ID_DESCRIPTION_SALES)
);

INSERT INTO SALES (DATE_SALE,SUB_TOTAL,TOTAL,FK_ID_EMPLOYEE,FK_ID_DESCRIPTION_SALES) VALUES (NOW(),109.98,120.98,'EMP02',1);

------------------------------------------------------------------------------------------------------------------------
DROP TABLE IF EXISTS PURCHASE_DESCRIPTION;
CREATE TABLE PURCHASES_DESCRIPTION(
ID_DESCRIPTION_PURCHASE INT NOT NULL,
FK_ID_PRODUCT INT NOT NULL,
FK_ID_SUPPLIER INT NOT NULL,
STOCK INT NOT NULL DEFAULT 0,
PRIMARY KEY(ID_DESCRIPTION_PURCHASE, FK_ID_PRODUCT),
FOREIGN KEY(FK_ID_PRODUCT) REFERENCES PRODUCTS(ID_PRODUCT),
FOREIGN KEY(FK_ID_SUPPLIER) REFERENCES SUPPLIERS(ID_SUPLIER)
);

INSERT INTO PURCHASES_DESCRIPTION VALUES (1,2,1,50);

DROP TABLE IF EXISTS PURCHASES;
CREATE TABLE PURCHASES(
ID_PURCHASE INT NOT NULL AUTO_INCREMENT,
DATE_PURCHASE TIMESTAMP,
TOTAL DOUBLE NOT NULL,
FK_ID_DESCRIPTION_PURCHASE INT NOT NULL,
PRIMARY KEY(ID_PURCHASE),
FOREIGN KEY(FK_ID_DESCRIPTION_PURCHASE) REFERENCES PURCHASES_DESCRIPTION(ID_DESCRIPTION_PURCHASE)
);

INSERT INTO PURCHASES (DATE_PURCHASE, TOTAL, FK_ID_DESCRIPTION_PURCHASE) VALUES (NOW(),59.99,1);

-----------------------------------------------------------------------------------------------------------------------------

--TRIGGER QUE ACTUALIZA EL SOTCK DEL INVENTARIO DESPUES DE INSERTAR UN ARTICULO AL LA TABLA SALES_DESCRIPTION
DELIMITER //
CREATE TRIGGER `TG_STOCK_UPDATE_SALES_AI` AFTER INSERT ON `sales_description` FOR EACH ROW BEGIN
DECLARE UNITS INT DEFAULT 0;
DECLARE ACTUAL_STOCK INT DEFAULT 0;

SET UNITS = (SELECT STOCK FROM SALES_DESCRIPTION WHERE ID_DESCRIPTION_SALES = NEW.ID_DESCRIPTION_SALES
AND FK_ID_PRODUCT = NEW.FK_ID_PRODUCT);
SET ACTUAL_STOCK = (SELECT STOCK FROM PRODUCTS WHERE ID_PRODUCT = NEW.FK_ID_PRODUCT);

UPDATE PRODUCTS SET STOCK = (ACTUAL_STOCK - UNITS) WHERE ID_PRODUCT = NEW.FK_ID_PRODUCT;

END //
DELIMITER ;


--TRIGGER QUE ACTUALIZA EL SOTCK DEL INVENTARIO DESPUES DE INSERTAR UN ARTICULO AL LA TABLA PURCHASES_DESCRIPTION
DELIMITER //
CREATE TRIGGER `TG_STOCK_UPDATE_PURCHASES_AI` AFTER INSERT ON `purchases_description` FOR EACH ROW BEGIN
DECLARE UNITS INT DEFAULT 0;
DECLARE ACTUAL_STOCK INT DEFAULT 0;

SET UNITS = (SELECT STOCK FROM PURCHASES_DESCRIPTION WHERE ID_DESCRIPTION_PURCHASE = NEW.ID_DESCRIPTION_PURCHASE
AND FK_ID_PRODUCT = NEW.FK_ID_PRODUCT);
SET ACTUAL_STOCK = (SELECT STOCK FROM PRODUCTS WHERE ID_PRODUCT = NEW.FK_ID_PRODUCT);

UPDATE PRODUCTS SET STOCK = (ACTUAL_STOCK + UNITS) WHERE ID_PRODUCT = NEW.FK_ID_PRODUCT;

END //
DELIMITER ;

-------------------------------------------------------------------------------------------------------------------------
--TRIGGER QUE INDICA CUANDO EL STOCK DE UN PRODUCTO ESTA APUNTO DE ACABARSE Y LE QUEDAN 5 EXISTENCIAS
DELIMITER //
CREATE TRIGGER `TG_STOCK_WARNING_AI` AFTER INSERT ON `sales_description` FOR EACH ROW BEGIN
DECLARE ACTUAL_STOCK INT DEFAULT 0;
DECLARE MENSAJE VARCHAR(100);

SET ACTUAL_STOCK= (SELECT STOCK FROM PRODUCTS WHERE ID_PRODUCT = NEW.FK_ID_PRODUCT);
SET MENSAJE = CONCAT('ATENCION! QUEDAN ', ACTUAL_STOCK,' UNIDADES DE ESTE PRODUCTO');

IF ACTUAL_STOCK <= 5 THEN
SIGNAL SQLSTATE '02000' SET MESSAGE_TEXT = MENSAJE;
END IF;

END //
DELIMITER ;

--TRIGGER QUE INDICA QUE NO HAY UNIDADES DEL PRODUCTO PEDIDO O QUE INDICA QUE NO HAY SUFUCIENTES PARA SATISFACER LA DEMANDA
DELIMITER //
CREATE TRIGGER `TG_STOCK_WARNING_BI` BEFORE INSERT ON `sales_description` FOR EACH ROW BEGIN
BEGIN
DECLARE ACTUAL_STOCK INT DEFAULT 0;
DECLARE MENSAJE VARCHAR(100);
DECLARE SALE_STOCK INT DEFAULT 0;
DECLARE DIFERENCIA INT DEFAULT 0;

SET ACTUAL_STOCK= (SELECT STOCK FROM PRODUCTS WHERE ID_PRODUCT = NEW.FK_ID_PRODUCT);
SET SALE_STOCK = NEW.STOCK;
SET DIFERENCIA = ACTUAL_STOCK - SALE_STOCK;

IF ACTUAL_STOCK = 0 THEN
SET MENSAJE = 'ATENCION! NO HAY UNIDADES DE ESTE PRODUCTO EN EL INVENTARIO';
SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = MENSAJE;
ELSEIF DIFERENCIA < 0  THEN 
SET MENSAJE = CONCAT('SOLO HAY ', ACTUAL_STOCK, ' UNIDADES');
SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = MENSAJE;
END IF;
END // 
DELIMITER ;
--------------------------------------------------------------------------------------------------------------------------------
--PROCEDIMIENTO PARA CANCELAR SALIDAS
--SD = SALE_DESCRIPTION
DROP PROCEDURE IF EXISTS SP_SALE_CANCEL;
DELIMITER //
CREATE PROCEDURE SP_SALE_CANCEL(IN PAR_ID INT)
BEGIN
DECLARE done INT DEFAULT FALSE;
DECLARE ID_SD INT;
DECLARE ID_DES INT DEFAULT (SELECT FK_ID_DESCRIPTION_SALES FROM SALES WHERE ID_SALE = PAR_ID);
DECLARE UNI INT;
DECLARE ID_PRO INT;
DECLARE RESTORE_STORE INT;
DECLARE ACTUAL_STORE INT;


DECLARE CUR CURSOR FOR 
	SELECT ID_DESCRIPTION_SALES,STOCK, FK_ID_PRODUCT
	 FROM SALES_DESCRIPTION 
	 WHERE ID_DESCRIPTION_SALES = ID_DES
     FOR UPDATE;
DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
OPEN CUR;

read_loop: LOOP
FETCH CUR INTO ID_SD,UNI,ID_PRO;

IF done THEN
	LEAVE read_loop;
END IF;

SET ACTUAL_STORE = (SELECT STOCK FROM PRODUCTS WHERE ID_PRODUCT = ID_PRO);
SET RESTORE_STORE = ACTUAL_STORE + UNI;

UPDATE PRODUCTS SET STOCK = RESTORE_STORE WHERE ID_PRODUCT = ID_PRO;
DELETE FROM SALES WHERE ID_SALE = PAR_ID;
DELETE FROM SALES_DESCRIPTION WHERE ID_DESCRIPTION_SALES = ID_DES;
END LOOP;
CLOSE CUR;
END //
DELIMITER ;



--PROCEDIMIENTO PARA CANCELAR ENTRADAS
--PD = PURCHASES_DESCRIPTION
DROP PROCEDURE IF EXISTS SP_PURCHASE_CANCEL;
DELIMITER //
CREATE PROCEDURE SP_PURCHASE_CANCEL(IN PAR_ID INT)
BEGIN
DECLARE done INT DEFAULT FALSE;
DECLARE ID_SD INT;
DECLARE ID_DES INT DEFAULT (SELECT FK_ID_DESCRIPTION_PURCHASE FROM PURCHASES WHERE ID_PURCHASE = PAR_ID);
DECLARE UNI INT;
DECLARE ID_PRO INT;
DECLARE RESTORE_STORE INT;
DECLARE ACTUAL_STORE INT;


DECLARE CUR CURSOR FOR 
	SELECT ID_DESCRIPTION_PURCHASE,STOCK, FK_ID_PRODUCT
	 FROM PURCHASES_DESCRIPTION 
	 WHERE ID_DESCRIPTION_PURCHASE = ID_DES
     FOR UPDATE;
DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
OPEN CUR;

read_loop: LOOP
FETCH CUR INTO ID_SD,UNI,ID_PRO;

IF done THEN
	LEAVE read_loop;
END IF;

SET ACTUAL_STORE = (SELECT STOCK FROM PRODUCTS WHERE ID_PRODUCT = ID_PRO);
SET RESTORE_STORE = ACTUAL_STORE - UNI;

UPDATE PRODUCTS SET STOCK = RESTORE_STORE WHERE ID_PRODUCT = ID_PRO;
DELETE FROM PURCHASES WHERE ID_PURCHASE = PAR_ID;
DELETE FROM PURCHASES_DESCRIPTION WHERE ID_DESCRIPTION_PURCHASE = ID_DES;
END LOOP;
CLOSE CUR;
END //
DELIMITER ;

--VISTAS
DROP VIEW IF EXISTS JUEGOS_MAS_VENDIDOS;
CREATE VIEW JUEGOS_MAS_VENDIDOS AS
select fk_id_product as id,products.name as videojuego, products.plataform as plataforma,
count(*) as ventas 
from sales_description
 left join products 
 on fk_id_product = id_product
 where products.fk_id_category = 5 
 group by fk_id_product
  ASC limit 5;

DROP VIEW IF EXISTS JUEGOS_MENOS_VENDIDOS;
CREATE VIEW JUEGOS_MENOS_VENDIDOS AS
 select fk_id_product as id,products.name as videojuego, products.plataform as plataforma,
count(*) as ventas 
from sales_description
 left join products 
 on fk_id_product = id_product 
 where products.fk_id_category = 5 
 group by fk_id_product
  DESC limit 5;

DROP VIEW IF EXISTS PRODUCTS_MAS_VENDIDOS;
CREATE VIEW PRODUCTOS_MAS_VENDIDOS AS
select fk_id_product as id,products.name as videojuego, products.plataform as plataforma,
count(*) as ventas 
from sales_description
 left join products 
 on fk_id_product = id_product
 where products.fk_id_category != 5 
 group by fk_id_product
  ASC limit 5;

DROP VIEW IF EXISTS PRODUCTOS_MENOS_VENDIDOS;
 CREATE VIEW PRODUCTOS_MENOS_VENDIDOS AS
 select fk_id_product as id,products.name as videojuego, products.plataform as plataforma,
count(*) as ventas 
from sales_description
 left join products 
 on fk_id_product = id_product 
 where products.fk_id_category != 5 
 group by fk_id_product
  DESC limit 5;

CREATE VIEW HISTORAL_PROVEEDORES AS
SELECT ID_PRODUCT, NAME, PLATAFORM, PURCHASES_DESCRIPTION.STOCK, (SELECT TOTAL FROM PURCHASES WHERE FK_ID_DESCRIPTION_PURCHASE
	= ID_DESCRIPTION_PURCHASE) AS TOTAL, (SELECT NAME FROM SUPPLIERS WHERE ID_SUPPLIER = FK_ID_SUPPLIER) AS SUPPLIER, (SELECT DATE_PURCHASE FROM PURCHASES
WHERE PURCHASES.FK_ID_DESCRIPTION_PURCHASE = PURCHASES_DESCRIPTION.ID_DESCRIPTION_PURCHASE) AS DATE_PURCHASE
FROM PRODUCTS LEFT JOIN PURCHASES_DESCRIPTION ON ID_PRODUCT = FK_ID_PRODUCT 
WHERE PURCHASES_DESCRIPTION.STOCK > 0;




--FUNCION PARA CALCULAR SUB_TOTAL
DROP FUNCTION IF EXISTS SUBTOTAL_SALE;
DELIMITER //
CREATE FUNCTION SUBTOTAL_SALE(ID INT) RETURNS DOUBLE 
BEGIN
DECLARE done INT DEFAULT FALSE;
DECLARE UNI INT;
DECLARE ID_PRO INT;
DECLARE PRECIO_PRO DOUBLE DEFAULT 0;
DECLARE TOTAL DOUBLE DEFAULT 0;

DECLARE CUR CURSOR FOR 
	SELECT STOCK, FK_ID_PRODUCT
	 FROM SALES_DESCRIPTION 
	 WHERE ID_DESCRIPTION_SALES = ID;
DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
OPEN CUR;

read_loop: LOOP
FETCH CUR INTO UNI,ID_PRO;

IF done THEN
	LEAVE read_loop;
END IF;

SET PRECIO_PRO = (SELECT PRICE FROM PRODUCTS WHERE ID_PRODUCT = ID_PRO);
SET TOTAL=TOTAL+PRECIO_PRO;

END LOOP;
CLOSE CUR;

RETURN TOTAL;
END //
DELIMITER ;

--FUNCION PARA CALCULAR TOTAL
DROP FUNCTION IF EXISTS TOTAL_SALE;
DELIMITER //
CREATE FUNCTION TOTAL_SALE(SUB_TOTAL DOUBLE) RETURNS DECIMAL(5,2) 
BEGIN
DECLARE TOTAL DECIMAL(5,2) DEFAULT 0;

SET TOTAL = (SUB_TOTAL + (SUB_TOTAL*.10));

RETURN TOTAL;
END //
DELIMITER ;


--
DROP FUNCTION IF EXISTS TOTAL_PURCHASE;
DELIMITER //
CREATE FUNCTION TOTAL_PURCHASE(SUB_TOTAL DOUBLE) RETURNS DECIMAL(5,2) 
BEGIN
DECLARE TOTAL DECIMAL(5,2) DEFAULT 0;

SET TOTAL = (SUB_TOTAL - (SUB_TOTAL*.40));

RETURN TOTAL;
END //
DELIMITER ;

--FUNCION PARA REALIZAR DESCUENTO EN CASO QUE LA TIENDA PONGA PROMOCION DE DESCONTAR 20 DOLARES CUANDO LA COMPRA ES MAYOR IGUAL A 100 DOLATES
DROP FUNCTION IF EXISTS TOTAL_DESCUENTO;
DELIMITER //
CREATE FUNCTION TOTAL_DESCUENTO(SUB_TOTAL DOUBLE) RETURNS DECIMAL(5,2) 
BEGIN
DECLARE TOTAL DECIMAL(5,2) DEFAULT 0;

IF TOTAL >= 100.00 THEN 
SET TOTAL = ((SUB_TOTAL - (SUB_TOTAL*.10)) - 20);
ELSE
SET TOTAL = (SUB_TOTAL - (SUB_TOTAL*.10));
END IF;

RETURN TOTAL;
END //
DELIMITER ;

----------------------------------------------------------------------------------------------------------------

drop procedure if exists calc_iva;

delimiter //

create procedure calc_iva()
begin 
declare val_id_sale int;
declare val_sub_total double;
declare val_total double;
declare finalizado int default 0;

declare cur_personal cursor for
select id_sale, sub_total, total from sales
for update;

declare continue handler for not found set finalizado = 1;
open cur_personal;
repeat
fetch cur_personal into val_id_sale, val_sub_total, val_total;

if val_sub_total >= 0.0 then set val_total = val_sub_total + (val_sub_total * 0.16);
end if;

update sales set total = val_total where id_sale = val_id_sale;
until finalizado = 1 end repeat;
close cur_personal;
end//

delimiter ;


----------------------------------------------------------------------------------------------------------------

CREATE VIEW empleadoMes AS
SELECT fk_id_employee as empleadoMes, count(*) as ventas
FROM sales
GROUP BY fk_id_employee asc limit 1;

