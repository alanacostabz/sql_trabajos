-----------------------------------------------------------------------------------------------------
--TRIGGERS
-----------------------------------------------------------------------------------------------------
--CINE
--TRIGGER QUE ACTUALIZA LOS BOLETOS DISPONIBLES DE UNA FUNCION DESPUES DE UNA COMPRA
DELIMITER //
CREATE TRIGGER `TG_ASIENTOS_DISPONIBLES_AI` AFTER INSERT ON `VENTA_BOLETOS` FOR EACH ROW BEGIN
DECLARE ASIENTOS INT DEFAULT 0;
DECLARE DISPONIBLES INT DEFAULT 0;

SET ASIENTOS = (SELECT CANTIDAD_BOLETOS FROM VENTA_BOLETOS WHERE ID_VENTA = NEW.ID_VENTA);
SET DISPONIBLES = (SELECT ASIENTOS_DISPONIBLES FROM FUNCIONES WHERE ID_FUNCION = NEW.FK_ID_FUNCION);

UPDATE  FUNCIONES SET ASIENTOS_DISPONIBLES = (DISPONIBLES - ASIENTOS) WHERE ID_FUNCION = NEW.FK_ID_FUNCION;

END //
DELIMITER ;

--TRIGER QUE INDICA QUE YA NO HAY BOLETOS EN EXISTENCIA
DELIMITER //
CREATE TRIGGER `TG_ASIENTOS_AGOTADOS_AI` AFTER INSERT ON `VENTA_BOLETOS` FOR EACH ROW BEGIN
DECLARE DISPONIBLES INT DEFAULT 0;
DECLARE MENSAJE VARCHAR(100);

SET DISPONIBLES= (SELECT ASIENTOS_DISPONIBLES FROM FUNCIONES WHERE ID_FUNCION = NEW.FK_ID_FUNCION);
SET MENSAJE = CONCAT('ATENCION! YA NO QUEDAN ASIENTOS DIPOSNIBLES PARA ESTA FUNCIÃ“N');

IF DISPONIBLES = 0 THEN
SIGNAL SQLSTATE '02000' SET MESSAGE_TEXT = MENSAJE;
END IF;

END //
DELIMITER ;

--CHECAR TRIGGER QUE INDICA QUE NO HAY BOLETOS DISPONIBLOES PARA DERMINADA FUNCION O NO CUBRE LA DEMANDA
DELIMITER //
CREATE TRIGGER `TG_ASIENTOS_AGOTADOS_BI` BEFORE INSERT ON `VENTA_BOLETOS` FOR EACH ROW
BEGIN
DECLARE DISPONIBLES INT DEFAULT 0;
DECLARE MENSAJE VARCHAR(255);
DECLARE ASIENTOS INT DEFAULT 0;
DECLARE DIFERENCIA INT DEFAULT 0;

SET DISPONIBLES= (SELECT ASIENTOS_DISPONIBLES FROM FUNCIONES WHERE ID_FUNCION = NEW.FK_ID_FUNCION);
SET ASIENTOS = NEW.CANTIDAD_BOLETOS;
SET DIFERENCIA = DISPONIBLES - ASIENTOS;

IF DISPONIBLES = 0 THEN
SET MENSAJE = 'ATENCION! NO HAY BOLETOS DISPONIBLES PARA ESTA FUNCION';
SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = MENSAJE;
ELSEIF DIFERENCIA < 0  THEN 
SET MENSAJE = CONCAT('SOLO HAY ', DISPONIBLES, ' BOLETOS PARA ESTA FUNCION');
SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = MENSAJE;
END IF;
END // 
DELIMITER ;



--PRODUCTOS
--TRIGGER QUE ACTUALIZA LA CANTIDAD DE CIERTO PRODUCO DEL INVENTARIO DESPUES DE INSERTAR UN PRODUCTO AL LA TABLA DESCRIPCION_VENTAS
DROP TRIGGER IF EXISTS TG_VENTA_PRODUCTOS_AI;
DELIMITER //
CREATE TRIGGER `TG_VENTA_PRODUCTOS_AI` AFTER INSERT ON `DESCRIPCION_VENTAS` FOR EACH ROW BEGIN
DECLARE CANTIDAD_AGGH INT DEFAULT 0;
DECLARE CANTIDAD_ACTUAL INT DEFAULT 0;
DECLARE TOTAL INT DEFAULT 0;

SET CANTIDAD_ACTUAL = (SELECT CANTIDAD FROM INVENTARIO WHERE FK_ID_PRODUCTO = NEW.FK_ID_PRODUCTO AND FK_ID_SUCURSAL = NEW.FK_ID_SUCURSAL);
SET CANTIDAD_AGGH = NEW.UNIDADES;


UPDATE INVENTARIO SET CANTIDAD = (CANTIDAD_ACTUAL - CANTIDAD_AGGH) WHERE FK_ID_PRODUCTO = NEW.FK_ID_PRODUCTO AND FK_ID_SUCURSAL = NEW.FK_ID_SUCURSAL;

END //
DELIMITER ;

INSERT INTO DESCRIPCION_VENTAS VALUES (21,1,4,1);

mysql> SELECT CANTIDAD FROM INVENTARIO WHERE FK_ID_PRODUCTO = 1 AND FK_ID_SUCURSAL = 1;

--TRIGGER QUE INDICA CUANDO LA CANTIDAD DE UN PRODUCTO ESTA APUNTO DE ACABARSE Y LE QUEDAN O NO CUBRE LA DEMANDA

DELIMITER //
CREATE TRIGGER `TG_STOCK_WARNING_BI` BEFORE INSERT ON `DESCRIPCION_VENTAS` FOR EACH ROW BEGIN
DECLARE CANTIDAD_ACTUAL INT DEFAULT 0;
DECLARE MENSAJE VARCHAR(100);
DECLARE CANTIDAD_AGGH INT DEFAULT 0;
DECLARE DIFERENCIA INT DEFAULT 0;

SET CANTIDAD_ACTUAL = (SELECT CANTIDAD FROM INVENTARIO WHERE FK_ID_PRODUCTO = NEW.FK_ID_PRODUCTO AND FK_ID_PRODUCTO = NEW.FK_ID_PRODUCTO);
SET CANTIDAD_AGGH = NEW.UNIDADES;
SET DIFERENCIA = CANTIDAD_ACTUAL - CANTIDAD_AGGH;

IF CANTIDAD_ACTUAL = 0 THEN
SET MENSAJE = 'ATENCION! NO HAY UNIDADES DE ESTE PRODUCTO EN EL INVENTARIO';
SIGNAL SQLSTATE '02000' SET MESSAGE_TEXT = MENSAJE;
ELSEIF DIFERENCIA < 0  THEN 
SET MENSAJE = CONCAT('SOLO HAY ', CANTIDAD_ACTUAL, ' UNIDADES');
SIGNAL SQLSTATE '02000' SET MESSAGE_TEXT = MENSAJE;
END IF;
END // 
DELIMITER ;

--COMPRAS
--TRIGER QUE ACTUALIZA LA CANTIDAD TOTAL DE DETERMINADOS PRODUCTOS EN EL INVENTARIO DE UNA SUCURSAL
DROP TRIGGER IF EXISTS TG_ACTUALIZAR_INVENTARIO_AI;
DELIMITER //
CREATE TRIGGER `TG_ACTUALIZAR_INVENTARIO_AI` AFTER INSERT ON `DESCRIPCION_COMPRAS` FOR EACH ROW BEGIN
DECLARE CANTIDAD_ACTUAL INT DEFAULT 0;
DECLARE CANTIDAD_AGGH INT DEFAULT 0;

SET CANTIDAD_ACTUAL = (SELECT CANTIDAD FROM INVENTARIO WHERE FK_ID_PRODUCTO = NEW.FK_ID_PRODUCTO AND FK_ID_SUCURSAL = NEW.FK_ID_SUCURSAL);
SET CANTIDAD_AGGH = NEW.UNIDADES;

UPDATE INVENTARIO SET CANTIDAD = (CANTIDAD_ACTUAL + CANTIDAD_AGGH) WHERE FK_ID_PRODUCTO = NEW.FK_ID_PRODUCTO AND FK_ID_SUCURSAL = NEW.FK_ID_SUCURSAL;

END //
DELIMITER ;
UPDATE INVENTARIO SET CANTIDAD = 100 WHERE FK_ID_PRODUCTO = 1 AND FK_ID_SUCURSAL = 1;

----------------------------------------------------------------------------------------------
--PROCEDURES
----------------------------------------------------------------------------------------------

--PROCEDIMIENTO PARA CANCELAR COMPRA DE BOLETOS
DROP PROCEDURE IF EXISTS SP_BOLETOS_CANCELAR;
DELIMITER //
CREATE PROCEDURE SP_BOLETOS_CANCELAR(IN ID_V INT)
BEGIN
DECLARE done INT DEFAULT FALSE;
DECLARE ID_VE INT;
DECLARE BOLETOS INT;
DECLARE FUNCION INT;
DECLARE BOLETOS_ACTUAL INT;
DECLARE RESTAURAR_BOLETOS INT;


DECLARE CUR CURSOR FOR 
	SELECT ID_VENTA,FK_ID_FUNCION, CANTIDAD_BOLETOS
	 FROM VENTA_BOLETOS
	 WHERE ID_VENTA = ID_V
     FOR UPDATE;
DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
OPEN CUR;

read_loop: LOOP
FETCH CUR INTO ID_VE,FUNCION,BOLETOS;

IF done THEN
	LEAVE read_loop;
END IF;

SET BOLETOS_ACTUAL = (SELECT ASIENTOS_DISPONIBLES FROM FUNCIONES WHERE ID_FUNCION = FUNCION);
SET RESTAURAR_BOLETOS = BOLETOS_ACTUAL + BOLETOS;

UPDATE FUNCIONES SET ASIENTOS_DISPONIBLES = RESTAURAR_BOLETOS WHERE ID_FUNCION = FUNCION;
DELETE FROM VENTA_BOLETOS WHERE ID_VENTA = ID_V;
END LOOP;
CLOSE CUR;
END //
DELIMITER ;

--PROCEDIMIENTO PARA CANCELAR VENTA DE PRODUCTOS
DROP PROCEDURE IF EXISTS SP_VENTAS_CANCELAR;
DROP PROCEDURE IF EXISTS SP_SALE_CANCEL;
DELIMITER //
CREATE PROCEDURE SP_VENTAS_CANCELAR(IN ID_VEN INT)
BEGIN
DECLARE done INT DEFAULT FALSE;
DECLARE ID_V INT;
DECLARE ID_DES INT DEFAULT (SELECT FK_ID_DESCRIPCION_VENTAS FROM VENTAS WHERE ID_VENTA = ID_VEN);
DECLARE CAN INT;
DECLARE ID_PRO INT;
DECLARE ID_SUC INT;
DECLARE RESTAURAR_PRODUCTOS INT;
DECLARE PRODUCTOS_ACTUAL INT;


DECLARE CUR CURSOR FOR 
	SELECT ID_DESCRIPCION_VENTA,UNIDADES,FK_ID_SUCURSAL, FK_ID_PRODUCTO
	 FROM DESCRIPCION_VENTAS 
	 WHERE ID_DESCRIPCION_VENTA = ID_DES
     FOR UPDATE;
DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
OPEN CUR;

read_loop: LOOP
FETCH CUR INTO ID_V,CAN,ID_SUC,ID_PRO;

IF done THEN
	LEAVE read_loop;
END IF;

SET PRODUCTOS_ACTUAL = (SELECT CANTIDAD FROM INVENTARIO WHERE FK_ID_PRODUCTO = ID_PRO AND FK_ID_SUCURSAL =ID_SUC);
SET RESTAURAR_PRODUCTOS = PRODUCTOS_ACTUAL + CAN;

UPDATE INVENTARIO SET CANTIDAD = RESTAURAR_PRODUCTOS WHERE FK_ID_PRODUCTO = ID_PRO AND FK_ID_SUCURSAL = ID_SUC;
DELETE FROM VENTAS WHERE ID_VENTA = ID_VEN;
DELETE FROM DESCRIPCION_VENTAS WHERE ID_DESCRIPCION_VENTA = ID_DES;
END LOOP;
CLOSE CUR;
END //
DELIMITER ;


--VISTAS

--VISTA PARA VER LAS FUNCIONES DE DETERMINADA SUCURSAL
DROP VIEW IF EXISTS FUNCIONES_SUCURSAL;
CREATE VIEW FUNCIONES_SUCURSAL AS
SELECT SUCURSAL.NOMBRE AS SUCURSAL, PELICULAS.NOMBRE AS PELICULA, FECHA_FUNCION, HORA_INICIO, FORMATO, LENGUAJE, SUBTITULOS, ASIENTOS_DISPONIBLES
FROM PELICULAS INNER JOIN FUNCIONES INNER JOIN SUCURSAL WHERE ID_PELICULA = FK_ID_PELICULA;

--VISTA PARA VER LA CARTELERA MAS RECIENTE
DROP VIEW IF EXISTS CARTELERA_ACTUAL;
CREATE VIEW CARTELERA_ACTUAL AS
SELECT NOMBRE, FECHA_ESTRENO_CINE FROM PELICULAS 
ORDER BY FECHA_ESTRENO_CINE DESC LIMIT 5;

--VISTA PARA VER LOS PRODUCTOS OFRECIDOS EN DULCERIA POR DETERMINADA 
DROP VIEW IF EXISTS PRODUCTOS_SUCURSAL;
CREATE VIEW PRODUCTOS_SUCURSAL AS
SELECT (SELECT NOMBRE FROM SUCURSAL WHERE ID_SUCURSAL = INVENTARIO.FK_ID_SUCURSAL) AS SUCURSAL,PRODUCTOS.NOMBRE AS NOMBRE, 
DESCRIPCION, DIVISION, TAMANO_CAPACIDAD, PRECIO, CATEGORIA 
FROM INVENTARIO INNER JOIN PRODUCTOS
WHERE DIVISION = 'DULCERIA'
GROUP BY FK_ID_PRODUCTO, INVENTARIO.FK_ID_SUCURSAL, TAMANO_CAPACIDAD;

--VISTA PARA VER LOS PRODUCTOS OFRECIDOS EN CAFETERIA POR DETERMINADA SUCURSAL
DROP VIEW IF EXISTS PRODUCTOS_CAFETERIA_SUCURSAL;
CREATE VIEW PRODUCTOS_CAFETERIA_SUCURSAL AS
SELECT (SELECT NOMBRE FROM SUCURSAL WHERE ID_SUCURSAL = INVENTARIO.FK_ID_SUCURSAL) AS SUCURSAL,
 NOMBRE, DESCRIPCION, DIVISION, TAMANO_CAPACIDAD, PRECIO, CATEGORIA 
FROM INVENTARIO INNER JOIN PRODUCTOS
WHERE DIVISION = 'CAFETERIA'
 GROUP BY FK_ID_PRODUCTO, INVENTARIO.FK_ID_SUCURSAL, TAMANO_CAPACIDAD;


 --FUNCION PARA CALCULAR SUB_TOTAL
DROP FUNCTION IF EXISTS SUBTOTAL_PRODUCTO;
DELIMITER //
CREATE FUNCTION SUBTOTAL_PRODUCTO(ID INT) RETURNS DOUBLE 
BEGIN
DECLARE done INT DEFAULT FALSE;
DECLARE UNI INT;
DECLARE ID_PRO INT;
DECLARE PRECIO_PRO DOUBLE DEFAULT 0;
DECLARE TOTAL DOUBLE DEFAULT 0;
DECLARE SUC INT DEFAULT 0;

DECLARE CUR CURSOR FOR 
	SELECT FK_ID_PRODUCTO, UNIDADES, FK_ID_SUCURSAL
	 FROM DESCRIPCION_VENTAS
	 WHERE ID_DESCRIPCION_VENTA = ID;
DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
OPEN CUR;

read_loop: LOOP
FETCH CUR INTO UNI,ID_PRO, SUC;

IF done THEN
	LEAVE read_loop;
END IF;

SET PRECIO_PRO = (SELECT PRECIO FROM PRODUCTOS WHERE ID_PRODUCTO = ID_PRO);
SET TOTAL=(TOTAL+PRECIO_PRO);
END LOOP;
CLOSE CUR;

RETURN TOTAL;
END //
DELIMITER ;

--FUNCION PARA CALCULAR TOTAL
DROP FUNCTION IF EXISTS TOTAL_VENTA;
DELIMITER //
CREATE FUNCTION TOTAL_SALE(SUB_TOTAL DOUBLE) RETURNS DECIMAL(5,2) 
BEGIN
DECLARE TOTAL DECIMAL(5,2) DEFAULT 0;

SET TOTAL = (SUB_TOTAL + (SUB_TOTAL*.10));

RETURN TOTAL;
END //
DELIMITER ;

--FUNCION PARA REALIZAR DESCUENTO EN DEPENDIENDO DE LOS PUNTOS DE LA MEMBRESIA
DROP FUNCTION IF EXISTS TOTAL_DESCUENTO;
DELIMITER //
CREATE FUNCTION TOTAL_DESCUENTO(ID INT, TOTAL_AGGH DOUBLE) RETURNS DECIMAL(5,2) 
BEGIN
DECLARE TOTAL DECIMAL(5,2) DEFAULT 0;
DECLARE PUNTOS INT DEFAULT 0;

SET PUNTOS = (SELECT PUNTOS FROM MEMBRESIAS WHERE FK_ID_CLIENTE = ID);

IF PUNTOS >= 70 THEN 
SET TOTAL = ((TOTAL_AGGH - (TOTAL_AGGH*.10)) - 10);
ELSEIF PUNTOS >= 55 THEN 
SET TOTAL = ((TOTAL_AGGH - (TOTAL_AGGH*.10)) - 5);
ELSE
SET TOTAL = (TOTAL_AGGH - (TOTAL_AGGH*.10));
END IF;

RETURN TOTAL;
END //
DELIMITER ;

--PARTICIONES
ALTER TABLE PERSONAS
PARTITION BY KEY(id_persona,curp,clave_ct)
PARTITIONS 6;

ALTER TABLE PERSONAS
PARTITION BY LIST(ESTADO)(
PARTITION EST1 VALUES IN (1),
PARTITION EST2 VALUES IN (2),
PARTITION EST3 VALUES IN (3),
PARTITION EST4 VALUES IN (4),
PARTITION EST5 VALUES IN (5),
PARTITION EST6 VALUES IN (6),
PARTITION EST7 VALUES IN (7),
PARTITION EST8 VALUES IN (8),
PARTITION EST9 VALUES IN (9),
PARTITION EST10 VALUES IN (10),
PARTITION EST11 VALUES IN (11),
PARTITION EST12 VALUES IN (12),
PARTITION EST13 VALUES IN (13),
PARTITION EST14 VALUES IN (14),
PARTITION EST15 VALUES IN (15),
PARTITION EST16 VALUES IN (16),
PARTITION EST17 VALUES IN (17),
PARTITION EST18 VALUES IN (18),
PARTITION EST19 VALUES IN (19),
PARTITION EST20 VALUES IN (20),
PARTITION EST21 VALUES IN (21),
PARTITION EST22 VALUES IN (22),
PARTITION EST23 VALUES IN (23),
PARTITION EST24 VALUES IN (24),
PARTITION EST25 VALUES IN (25),
PARTITION EST26 VALUES IN (26),
PARTITION EST27 VALUES IN (27),
PARTITION EST28 VALUES IN (28),
PARTITION EST29 VALUES IN (29),
PARTITION EST30 VALUES IN (30),
PARTITION EST31 VALUES IN (31),
PARTITION EST32 VALUES IN (32)
);
------------------
--INDICES
------------------
CREATE INDEX clieNtes_Nombre_estado_idx ON PERSONAS(Nombre, estado);
CREATE INDEX PRODUCTOS_TAMANO_PRICE_IDX ON PRODUCTOS(ID_PRODUCTO, TAMANO_CAPACIDAD, PRECIO);
